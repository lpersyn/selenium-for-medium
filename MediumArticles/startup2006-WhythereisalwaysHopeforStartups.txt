The best business books have a profound yet easy to understand insight based on a simple observation. The Innovators Dilemma is one of those books. It is also one of the best examples of why there is always hope for startups in the technology space, even when competing against market leading companies.
Clayton Christensen makes the observation that even when market leading companies do everything right, they eventually lose their leadership position due to some unforeseen and disruptive product, technology, or business model. Its a form of corporate Darwinism where every company has its demise encoded into its DNA. Companies might be able to adapt to changing market conditions, but if youre a dinosaur that needs a lot of food for sustenance, you are not going to survive the Ice Age. You have to become a bird and compete with other smaller animals used to surviving on less food.
The observation is very simple but the interesting insight from the book is analyzing why leading companies have this predictable lifecycle. Essentially, the insight can be summarized in one simple graph:
The graph shows how all markets have a sweet spot that is bounded by low end demand and high end demand. Companies start out by barely meeting the demand from the low end and then continue to innovate themselves into the sweet spot. They then continue the innovation until they innovate themselves out of the sweet spot.
Why do companies do this? Its obvious to anyone who has worked at a large company. Every product managers dilemma is the balancing act of satisfying requirements from large customers with risky innovation that allows them to offer new products and enter new markets. To satisfy the need for revenue growth and earnings targets, the tendency is for companies to direct their resources to satisfying their larger, more visible customers who bring in the quantifiable and recognizable revenue.
In the software industry, theres another good reason for this behavior. Since software is not a recurring revenue product (unless its a Software as a Service solution), companies need to keep introducing new features to drive revenue via product upgrades. The classic example of this corporate behavior is Microsoft with Microsoft Office. Your typical user of Microsoft Office is unaware of the many advanced features, yet power users continue to drive demand for even more advanced capabilities.
When market leading companies fall into this trap of over-innovating on their innovation trajectory, it creates an opportunity for smaller and nimbler companies with faster innovation trajectories. These companies will start out with less features, but given their faster trajectory, they will catch up to the sweet spot with a more compelling product and disruptive business model. The current example of this phenomeon is what is happening in the CRM space with Siebel and Salesforce.com. Siebel still has the superior product but Salesforce is making significant inroads based on the combination of usability innovation, software delivery innovation, and a disruptive business model. There are many others historical examples as well as emerging examples with companies such as Writely and Numsum that are going up against the Microsoft Office franchise.
So, what does all of this mean for Startups? The Innovators Dilemma provides real hope for Startups when competing against much larger established companies. It provides an analysis of how market leading companies fail and it backs up the analysis with historical case studies across several high tech industries. Even the largest, most successful companies can be undermined by the right Startup with the right mix of product, business strategy, and execution.
The other useful insight that you can derive from the Innovators Dilemma are guiding principles for Startups when attacking a market leader. Here is my take on the top three things that Startups need to keep in mind when exploting the Innovators Dilemma of a market leader:
Im sure there are others, so feel free to drop me an email or blog about this entry on your own blog.

